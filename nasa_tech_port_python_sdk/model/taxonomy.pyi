# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class Taxonomy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represents data associated with a single taxonomy root entity.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            taxonomyRootId = schemas.Int64Schema
            releaseStatusId = schemas.Int64Schema
            definition = schemas.StrSchema
            modifiedBy = schemas.StrSchema
            modifiedDate = schemas.DateSchema
            
            
            class children(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TreeNode']:
                        return TreeNode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TreeNode'], typing.List['TreeNode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'children':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TreeNode':
                    return super().__getitem__(i)
            releaseStatus = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "taxonomyRootId": taxonomyRootId,
                "releaseStatusId": releaseStatusId,
                "definition": definition,
                "modifiedBy": modifiedBy,
                "modifiedDate": modifiedDate,
                "children": children,
                "releaseStatus": releaseStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxonomyRootId"]) -> MetaOapg.properties.taxonomyRootId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseStatusId"]) -> MetaOapg.properties.releaseStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedBy"]) -> MetaOapg.properties.modifiedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedDate"]) -> MetaOapg.properties.modifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["children"]) -> MetaOapg.properties.children: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseStatus"]) -> MetaOapg.properties.releaseStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "taxonomyRootId", "releaseStatusId", "definition", "modifiedBy", "modifiedDate", "children", "releaseStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxonomyRootId"]) -> typing.Union[MetaOapg.properties.taxonomyRootId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseStatusId"]) -> typing.Union[MetaOapg.properties.releaseStatusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedBy"]) -> typing.Union[MetaOapg.properties.modifiedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedDate"]) -> typing.Union[MetaOapg.properties.modifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["children"]) -> typing.Union[MetaOapg.properties.children, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseStatus"]) -> typing.Union[MetaOapg.properties.releaseStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "taxonomyRootId", "releaseStatusId", "definition", "modifiedBy", "modifiedDate", "children", "releaseStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        taxonomyRootId: typing.Union[MetaOapg.properties.taxonomyRootId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        releaseStatusId: typing.Union[MetaOapg.properties.releaseStatusId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        definition: typing.Union[MetaOapg.properties.definition, str, schemas.Unset] = schemas.unset,
        modifiedBy: typing.Union[MetaOapg.properties.modifiedBy, str, schemas.Unset] = schemas.unset,
        modifiedDate: typing.Union[MetaOapg.properties.modifiedDate, str, date, schemas.Unset] = schemas.unset,
        children: typing.Union[MetaOapg.properties.children, list, tuple, schemas.Unset] = schemas.unset,
        releaseStatus: typing.Union[MetaOapg.properties.releaseStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Taxonomy':
        return super().__new__(
            cls,
            *args,
            title=title,
            taxonomyRootId=taxonomyRootId,
            releaseStatusId=releaseStatusId,
            definition=definition,
            modifiedBy=modifiedBy,
            modifiedDate=modifiedDate,
            children=children,
            releaseStatus=releaseStatus,
            _configuration=_configuration,
            **kwargs,
        )

from nasa_tech_port_python_sdk.model.tree_node import TreeNode
