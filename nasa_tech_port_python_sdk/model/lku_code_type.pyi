# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class LkuCodeType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Lookup code type further showing how the lookup codes within this type will be used.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            lkuCodeTypeId = schemas.Int64Schema
            codeType = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "lkuCodeTypeId": lkuCodeTypeId,
                "codeType": codeType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lkuCodeTypeId"]) -> MetaOapg.properties.lkuCodeTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codeType"]) -> MetaOapg.properties.codeType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "lkuCodeTypeId", "codeType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lkuCodeTypeId"]) -> typing.Union[MetaOapg.properties.lkuCodeTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codeType"]) -> typing.Union[MetaOapg.properties.codeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "lkuCodeTypeId", "codeType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        lkuCodeTypeId: typing.Union[MetaOapg.properties.lkuCodeTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        codeType: typing.Union[MetaOapg.properties.codeType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LkuCodeType':
        return super().__new__(
            cls,
            *args,
            description=description,
            lkuCodeTypeId=lkuCodeTypeId,
            codeType=codeType,
            _configuration=_configuration,
            **kwargs,
        )
