# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class LkuCode(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Lookup code representing more data about an object usually stored in our database.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            lkuCodeId = schemas.Int64Schema
            code = schemas.StrSchema
            lkuCodeTypeId = schemas.Int64Schema
        
            @staticmethod
            def lkuCodeType() -> typing.Type['LkuCodeType']:
                return LkuCodeType
            displayOrder = schemas.Int64Schema
            __annotations__ = {
                "description": description,
                "lkuCodeId": lkuCodeId,
                "code": code,
                "lkuCodeTypeId": lkuCodeTypeId,
                "lkuCodeType": lkuCodeType,
                "displayOrder": displayOrder,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lkuCodeId"]) -> MetaOapg.properties.lkuCodeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lkuCodeTypeId"]) -> MetaOapg.properties.lkuCodeTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lkuCodeType"]) -> 'LkuCodeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayOrder"]) -> MetaOapg.properties.displayOrder: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "lkuCodeId", "code", "lkuCodeTypeId", "lkuCodeType", "displayOrder", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lkuCodeId"]) -> typing.Union[MetaOapg.properties.lkuCodeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lkuCodeTypeId"]) -> typing.Union[MetaOapg.properties.lkuCodeTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lkuCodeType"]) -> typing.Union['LkuCodeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayOrder"]) -> typing.Union[MetaOapg.properties.displayOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "lkuCodeId", "code", "lkuCodeTypeId", "lkuCodeType", "displayOrder", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        lkuCodeId: typing.Union[MetaOapg.properties.lkuCodeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        lkuCodeTypeId: typing.Union[MetaOapg.properties.lkuCodeTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lkuCodeType: typing.Union['LkuCodeType', schemas.Unset] = schemas.unset,
        displayOrder: typing.Union[MetaOapg.properties.displayOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LkuCode':
        return super().__new__(
            cls,
            *args,
            description=description,
            lkuCodeId=lkuCodeId,
            code=code,
            lkuCodeTypeId=lkuCodeTypeId,
            lkuCodeType=lkuCodeType,
            displayOrder=displayOrder,
            _configuration=_configuration,
            **kwargs,
        )

from nasa_tech_port_python_sdk.model.lku_code_type import LkuCodeType
