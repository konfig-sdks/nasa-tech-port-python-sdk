# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class Program(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represents a NASA program.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            programId = schemas.Int64Schema
            acronym = schemas.StrSchema
            active = schemas.BoolSchema
        
            @staticmethod
            def parentProgram() -> typing.Type['Program']:
                return Program
            parentProgramId = schemas.Int64Schema
        
            @staticmethod
            def responsibleMd() -> typing.Type['Organization']:
                return Organization
            responsibleMdId = schemas.Int64Schema
            __annotations__ = {
                "title": title,
                "description": description,
                "programId": programId,
                "acronym": acronym,
                "active": active,
                "parentProgram": parentProgram,
                "parentProgramId": parentProgramId,
                "responsibleMd": responsibleMd,
                "responsibleMdId": responsibleMdId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["programId"]) -> MetaOapg.properties.programId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentProgram"]) -> 'Program': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentProgramId"]) -> MetaOapg.properties.parentProgramId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibleMd"]) -> 'Organization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibleMdId"]) -> MetaOapg.properties.responsibleMdId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "programId", "acronym", "active", "parentProgram", "parentProgramId", "responsibleMd", "responsibleMdId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["programId"]) -> typing.Union[MetaOapg.properties.programId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> typing.Union[MetaOapg.properties.acronym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentProgram"]) -> typing.Union['Program', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentProgramId"]) -> typing.Union[MetaOapg.properties.parentProgramId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibleMd"]) -> typing.Union['Organization', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibleMdId"]) -> typing.Union[MetaOapg.properties.responsibleMdId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "programId", "acronym", "active", "parentProgram", "parentProgramId", "responsibleMd", "responsibleMdId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        programId: typing.Union[MetaOapg.properties.programId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        acronym: typing.Union[MetaOapg.properties.acronym, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        parentProgram: typing.Union['Program', schemas.Unset] = schemas.unset,
        parentProgramId: typing.Union[MetaOapg.properties.parentProgramId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        responsibleMd: typing.Union['Organization', schemas.Unset] = schemas.unset,
        responsibleMdId: typing.Union[MetaOapg.properties.responsibleMdId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Program':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            programId=programId,
            acronym=acronym,
            active=active,
            parentProgram=parentProgram,
            parentProgramId=parentProgramId,
            responsibleMd=responsibleMd,
            responsibleMdId=responsibleMdId,
            _configuration=_configuration,
            **kwargs,
        )

from nasa_tech_port_python_sdk.model.organization import Organization
from nasa_tech_port_python_sdk.model.program import Program
