# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Top-level TechPort object representing a NASA technology project and its associated data.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            projectId = schemas.Int64Schema
            lastUpdated = schemas.DateSchema
            acronym = schemas.StrSchema
            statusDescription = schemas.StrSchema
            benefits = schemas.StrSchema
            startDateString = schemas.StrSchema
            endDateString = schemas.StrSchema
            startTrl = schemas.Int64Schema
            currentTrl = schemas.Int64Schema
            endTrl = schemas.Int64Schema
            
            
            class primaryTaxonomyNodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TaxonomyNode']:
                        return TaxonomyNode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TaxonomyNode'], typing.List['TaxonomyNode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primaryTaxonomyNodes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TaxonomyNode':
                    return super().__getitem__(i)
            
            
            class additionalTaxonomyNodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TaxonomyNode']:
                        return TaxonomyNode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TaxonomyNode'], typing.List['TaxonomyNode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalTaxonomyNodes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TaxonomyNode':
                    return super().__getitem__(i)
            
            
            class destinations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LkuCode']:
                        return LkuCode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LkuCode'], typing.List['LkuCode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destinations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LkuCode':
                    return super().__getitem__(i)
            program = schemas.DictSchema
            responsibleMd = schemas.DictSchema
            leadOrganization = schemas.DictSchema
            
            
            class supportingOrganizations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Organization']:
                        return Organization
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Organization'], typing.List['Organization']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supportingOrganizations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Organization':
                    return super().__getitem__(i)
            
            
            class coFundingPartners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Organization']:
                        return Organization
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Organization'], typing.List['Organization']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coFundingPartners':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Organization':
                    return super().__getitem__(i)
            
            
            class statesWithWork(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statesWithWork':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class programDirectors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'programDirectors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
            
            
            class programManagers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'programManagers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
            
            
            class projectManagers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projectManagers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
            
            
            class principalInvestigators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'principalInvestigators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
            
            
            class coInvestigators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coInvestigators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
            website = schemas.StrSchema
            
            
            class libraryItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LibraryItem']:
                        return LibraryItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LibraryItem'], typing.List['LibraryItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'libraryItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LibraryItem':
                    return super().__getitem__(i)
            
            
            class stiDaas(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LibraryItem']:
                        return LibraryItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LibraryItem'], typing.List['LibraryItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stiDaas':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LibraryItem':
                    return super().__getitem__(i)
            closeoutSummary = schemas.StrSchema
            
            
            class closeoutDocuments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LibraryItem']:
                        return LibraryItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LibraryItem'], typing.List['LibraryItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'closeoutDocuments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LibraryItem':
                    return super().__getitem__(i)
            primaryImage = schemas.DictSchema
            viewCount = schemas.Int64Schema
            __annotations__ = {
                "title": title,
                "description": description,
                "projectId": projectId,
                "lastUpdated": lastUpdated,
                "acronym": acronym,
                "statusDescription": statusDescription,
                "benefits": benefits,
                "startDateString": startDateString,
                "endDateString": endDateString,
                "startTrl": startTrl,
                "currentTrl": currentTrl,
                "endTrl": endTrl,
                "primaryTaxonomyNodes": primaryTaxonomyNodes,
                "additionalTaxonomyNodes": additionalTaxonomyNodes,
                "destinations": destinations,
                "program": program,
                "responsibleMd": responsibleMd,
                "leadOrganization": leadOrganization,
                "supportingOrganizations": supportingOrganizations,
                "coFundingPartners": coFundingPartners,
                "statesWithWork": statesWithWork,
                "programDirectors": programDirectors,
                "programManagers": programManagers,
                "projectManagers": projectManagers,
                "principalInvestigators": principalInvestigators,
                "coInvestigators": coInvestigators,
                "website": website,
                "libraryItems": libraryItems,
                "stiDaas": stiDaas,
                "closeoutSummary": closeoutSummary,
                "closeoutDocuments": closeoutDocuments,
                "primaryImage": primaryImage,
                "viewCount": viewCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDescription"]) -> MetaOapg.properties.statusDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefits"]) -> MetaOapg.properties.benefits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDateString"]) -> MetaOapg.properties.startDateString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDateString"]) -> MetaOapg.properties.endDateString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTrl"]) -> MetaOapg.properties.startTrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentTrl"]) -> MetaOapg.properties.currentTrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTrl"]) -> MetaOapg.properties.endTrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryTaxonomyNodes"]) -> MetaOapg.properties.primaryTaxonomyNodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalTaxonomyNodes"]) -> MetaOapg.properties.additionalTaxonomyNodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinations"]) -> MetaOapg.properties.destinations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["program"]) -> MetaOapg.properties.program: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibleMd"]) -> MetaOapg.properties.responsibleMd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leadOrganization"]) -> MetaOapg.properties.leadOrganization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportingOrganizations"]) -> MetaOapg.properties.supportingOrganizations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coFundingPartners"]) -> MetaOapg.properties.coFundingPartners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statesWithWork"]) -> MetaOapg.properties.statesWithWork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["programDirectors"]) -> MetaOapg.properties.programDirectors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["programManagers"]) -> MetaOapg.properties.programManagers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectManagers"]) -> MetaOapg.properties.projectManagers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["principalInvestigators"]) -> MetaOapg.properties.principalInvestigators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coInvestigators"]) -> MetaOapg.properties.coInvestigators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["libraryItems"]) -> MetaOapg.properties.libraryItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stiDaas"]) -> MetaOapg.properties.stiDaas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closeoutSummary"]) -> MetaOapg.properties.closeoutSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closeoutDocuments"]) -> MetaOapg.properties.closeoutDocuments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryImage"]) -> MetaOapg.properties.primaryImage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewCount"]) -> MetaOapg.properties.viewCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "projectId", "lastUpdated", "acronym", "statusDescription", "benefits", "startDateString", "endDateString", "startTrl", "currentTrl", "endTrl", "primaryTaxonomyNodes", "additionalTaxonomyNodes", "destinations", "program", "responsibleMd", "leadOrganization", "supportingOrganizations", "coFundingPartners", "statesWithWork", "programDirectors", "programManagers", "projectManagers", "principalInvestigators", "coInvestigators", "website", "libraryItems", "stiDaas", "closeoutSummary", "closeoutDocuments", "primaryImage", "viewCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> typing.Union[MetaOapg.properties.acronym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDescription"]) -> typing.Union[MetaOapg.properties.statusDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefits"]) -> typing.Union[MetaOapg.properties.benefits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDateString"]) -> typing.Union[MetaOapg.properties.startDateString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDateString"]) -> typing.Union[MetaOapg.properties.endDateString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTrl"]) -> typing.Union[MetaOapg.properties.startTrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentTrl"]) -> typing.Union[MetaOapg.properties.currentTrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTrl"]) -> typing.Union[MetaOapg.properties.endTrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryTaxonomyNodes"]) -> typing.Union[MetaOapg.properties.primaryTaxonomyNodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalTaxonomyNodes"]) -> typing.Union[MetaOapg.properties.additionalTaxonomyNodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinations"]) -> typing.Union[MetaOapg.properties.destinations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["program"]) -> typing.Union[MetaOapg.properties.program, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibleMd"]) -> typing.Union[MetaOapg.properties.responsibleMd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leadOrganization"]) -> typing.Union[MetaOapg.properties.leadOrganization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportingOrganizations"]) -> typing.Union[MetaOapg.properties.supportingOrganizations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coFundingPartners"]) -> typing.Union[MetaOapg.properties.coFundingPartners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statesWithWork"]) -> typing.Union[MetaOapg.properties.statesWithWork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["programDirectors"]) -> typing.Union[MetaOapg.properties.programDirectors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["programManagers"]) -> typing.Union[MetaOapg.properties.programManagers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectManagers"]) -> typing.Union[MetaOapg.properties.projectManagers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["principalInvestigators"]) -> typing.Union[MetaOapg.properties.principalInvestigators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coInvestigators"]) -> typing.Union[MetaOapg.properties.coInvestigators, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["libraryItems"]) -> typing.Union[MetaOapg.properties.libraryItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stiDaas"]) -> typing.Union[MetaOapg.properties.stiDaas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closeoutSummary"]) -> typing.Union[MetaOapg.properties.closeoutSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closeoutDocuments"]) -> typing.Union[MetaOapg.properties.closeoutDocuments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryImage"]) -> typing.Union[MetaOapg.properties.primaryImage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewCount"]) -> typing.Union[MetaOapg.properties.viewCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "projectId", "lastUpdated", "acronym", "statusDescription", "benefits", "startDateString", "endDateString", "startTrl", "currentTrl", "endTrl", "primaryTaxonomyNodes", "additionalTaxonomyNodes", "destinations", "program", "responsibleMd", "leadOrganization", "supportingOrganizations", "coFundingPartners", "statesWithWork", "programDirectors", "programManagers", "projectManagers", "principalInvestigators", "coInvestigators", "website", "libraryItems", "stiDaas", "closeoutSummary", "closeoutDocuments", "primaryImage", "viewCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, date, schemas.Unset] = schemas.unset,
        acronym: typing.Union[MetaOapg.properties.acronym, str, schemas.Unset] = schemas.unset,
        statusDescription: typing.Union[MetaOapg.properties.statusDescription, str, schemas.Unset] = schemas.unset,
        benefits: typing.Union[MetaOapg.properties.benefits, str, schemas.Unset] = schemas.unset,
        startDateString: typing.Union[MetaOapg.properties.startDateString, str, schemas.Unset] = schemas.unset,
        endDateString: typing.Union[MetaOapg.properties.endDateString, str, schemas.Unset] = schemas.unset,
        startTrl: typing.Union[MetaOapg.properties.startTrl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentTrl: typing.Union[MetaOapg.properties.currentTrl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endTrl: typing.Union[MetaOapg.properties.endTrl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        primaryTaxonomyNodes: typing.Union[MetaOapg.properties.primaryTaxonomyNodes, list, tuple, schemas.Unset] = schemas.unset,
        additionalTaxonomyNodes: typing.Union[MetaOapg.properties.additionalTaxonomyNodes, list, tuple, schemas.Unset] = schemas.unset,
        destinations: typing.Union[MetaOapg.properties.destinations, list, tuple, schemas.Unset] = schemas.unset,
        program: typing.Union[MetaOapg.properties.program, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        responsibleMd: typing.Union[MetaOapg.properties.responsibleMd, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        leadOrganization: typing.Union[MetaOapg.properties.leadOrganization, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        supportingOrganizations: typing.Union[MetaOapg.properties.supportingOrganizations, list, tuple, schemas.Unset] = schemas.unset,
        coFundingPartners: typing.Union[MetaOapg.properties.coFundingPartners, list, tuple, schemas.Unset] = schemas.unset,
        statesWithWork: typing.Union[MetaOapg.properties.statesWithWork, list, tuple, schemas.Unset] = schemas.unset,
        programDirectors: typing.Union[MetaOapg.properties.programDirectors, list, tuple, schemas.Unset] = schemas.unset,
        programManagers: typing.Union[MetaOapg.properties.programManagers, list, tuple, schemas.Unset] = schemas.unset,
        projectManagers: typing.Union[MetaOapg.properties.projectManagers, list, tuple, schemas.Unset] = schemas.unset,
        principalInvestigators: typing.Union[MetaOapg.properties.principalInvestigators, list, tuple, schemas.Unset] = schemas.unset,
        coInvestigators: typing.Union[MetaOapg.properties.coInvestigators, list, tuple, schemas.Unset] = schemas.unset,
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        libraryItems: typing.Union[MetaOapg.properties.libraryItems, list, tuple, schemas.Unset] = schemas.unset,
        stiDaas: typing.Union[MetaOapg.properties.stiDaas, list, tuple, schemas.Unset] = schemas.unset,
        closeoutSummary: typing.Union[MetaOapg.properties.closeoutSummary, str, schemas.Unset] = schemas.unset,
        closeoutDocuments: typing.Union[MetaOapg.properties.closeoutDocuments, list, tuple, schemas.Unset] = schemas.unset,
        primaryImage: typing.Union[MetaOapg.properties.primaryImage, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        viewCount: typing.Union[MetaOapg.properties.viewCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            projectId=projectId,
            lastUpdated=lastUpdated,
            acronym=acronym,
            statusDescription=statusDescription,
            benefits=benefits,
            startDateString=startDateString,
            endDateString=endDateString,
            startTrl=startTrl,
            currentTrl=currentTrl,
            endTrl=endTrl,
            primaryTaxonomyNodes=primaryTaxonomyNodes,
            additionalTaxonomyNodes=additionalTaxonomyNodes,
            destinations=destinations,
            program=program,
            responsibleMd=responsibleMd,
            leadOrganization=leadOrganization,
            supportingOrganizations=supportingOrganizations,
            coFundingPartners=coFundingPartners,
            statesWithWork=statesWithWork,
            programDirectors=programDirectors,
            programManagers=programManagers,
            projectManagers=projectManagers,
            principalInvestigators=principalInvestigators,
            coInvestigators=coInvestigators,
            website=website,
            libraryItems=libraryItems,
            stiDaas=stiDaas,
            closeoutSummary=closeoutSummary,
            closeoutDocuments=closeoutDocuments,
            primaryImage=primaryImage,
            viewCount=viewCount,
            _configuration=_configuration,
            **kwargs,
        )

from nasa_tech_port_python_sdk.model.contact import Contact
from nasa_tech_port_python_sdk.model.library_item import LibraryItem
from nasa_tech_port_python_sdk.model.lku_code import LkuCode
from nasa_tech_port_python_sdk.model.location import Location
from nasa_tech_port_python_sdk.model.organization import Organization
from nasa_tech_port_python_sdk.model.taxonomy_node import TaxonomyNode
