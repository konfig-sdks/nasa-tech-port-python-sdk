# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class OrganizationType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A heirarchical representation of an organization type. Similar to the LkuCode type returned for organization.organizationType, but formatted in a parent/child relationship.
    """


    class MetaOapg:
        
        class properties:
            organizationTypeId = schemas.Int64Schema
            name = schemas.StrSchema
            hasChildren = schemas.BoolSchema
            level = schemas.StrSchema
            parentId = schemas.Int64Schema
            __annotations__ = {
                "organizationTypeId": organizationTypeId,
                "name": name,
                "hasChildren": hasChildren,
                "level": level,
                "parentId": parentId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationTypeId"]) -> MetaOapg.properties.organizationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasChildren"]) -> MetaOapg.properties.hasChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["organizationTypeId", "name", "hasChildren", "level", "parentId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationTypeId"]) -> typing.Union[MetaOapg.properties.organizationTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasChildren"]) -> typing.Union[MetaOapg.properties.hasChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organizationTypeId", "name", "hasChildren", "level", "parentId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        organizationTypeId: typing.Union[MetaOapg.properties.organizationTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        hasChildren: typing.Union[MetaOapg.properties.hasChildren, bool, schemas.Unset] = schemas.unset,
        level: typing.Union[MetaOapg.properties.level, str, schemas.Unset] = schemas.unset,
        parentId: typing.Union[MetaOapg.properties.parentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationType':
        return super().__new__(
            cls,
            *args,
            organizationTypeId=organizationTypeId,
            name=name,
            hasChildren=hasChildren,
            level=level,
            parentId=parentId,
            _configuration=_configuration,
            **kwargs,
        )
