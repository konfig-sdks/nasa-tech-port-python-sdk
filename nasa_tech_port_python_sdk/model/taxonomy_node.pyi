# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class TaxonomyNode(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represents data associated with a single taxonomy node entity.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            taxonomyNodeId = schemas.Int64Schema
            taxonomyRootId = schemas.Int64Schema
            parentNodeId = schemas.Int64Schema
            level = schemas.Int64Schema
            code = schemas.StrSchema
            definition = schemas.StrSchema
            hasChildren = schemas.BoolSchema
            publishedUrl = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "taxonomyNodeId": taxonomyNodeId,
                "taxonomyRootId": taxonomyRootId,
                "parentNodeId": parentNodeId,
                "level": level,
                "code": code,
                "definition": definition,
                "hasChildren": hasChildren,
                "publishedUrl": publishedUrl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxonomyNodeId"]) -> MetaOapg.properties.taxonomyNodeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxonomyRootId"]) -> MetaOapg.properties.taxonomyRootId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentNodeId"]) -> MetaOapg.properties.parentNodeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasChildren"]) -> MetaOapg.properties.hasChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishedUrl"]) -> MetaOapg.properties.publishedUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "taxonomyNodeId", "taxonomyRootId", "parentNodeId", "level", "code", "definition", "hasChildren", "publishedUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxonomyNodeId"]) -> typing.Union[MetaOapg.properties.taxonomyNodeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxonomyRootId"]) -> typing.Union[MetaOapg.properties.taxonomyRootId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentNodeId"]) -> typing.Union[MetaOapg.properties.parentNodeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasChildren"]) -> typing.Union[MetaOapg.properties.hasChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishedUrl"]) -> typing.Union[MetaOapg.properties.publishedUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "taxonomyNodeId", "taxonomyRootId", "parentNodeId", "level", "code", "definition", "hasChildren", "publishedUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        taxonomyNodeId: typing.Union[MetaOapg.properties.taxonomyNodeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taxonomyRootId: typing.Union[MetaOapg.properties.taxonomyRootId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parentNodeId: typing.Union[MetaOapg.properties.parentNodeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        level: typing.Union[MetaOapg.properties.level, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        definition: typing.Union[MetaOapg.properties.definition, str, schemas.Unset] = schemas.unset,
        hasChildren: typing.Union[MetaOapg.properties.hasChildren, bool, schemas.Unset] = schemas.unset,
        publishedUrl: typing.Union[MetaOapg.properties.publishedUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaxonomyNode':
        return super().__new__(
            cls,
            *args,
            title=title,
            taxonomyNodeId=taxonomyNodeId,
            taxonomyRootId=taxonomyRootId,
            parentNodeId=parentNodeId,
            level=level,
            code=code,
            definition=definition,
            hasChildren=hasChildren,
            publishedUrl=publishedUrl,
            _configuration=_configuration,
            **kwargs,
        )
