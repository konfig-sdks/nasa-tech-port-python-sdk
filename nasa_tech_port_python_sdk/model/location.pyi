# coding: utf-8

"""
    TechPort

    TechPort RESTful API

    The version of the OpenAPI document: 3.13.2
    Contact: hq-techport@mail.nasa.gov
    Created by: https://techport.nasa.gov
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nasa_tech_port_python_sdk import schemas  # noqa: F401


class Location(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Represents a physical location.
    """


    class MetaOapg:
        
        class properties:
            locationId = schemas.Int64Schema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            city = schemas.StrSchema
        
            @staticmethod
            def locationType() -> typing.Type['LkuCode']:
                return LkuCode
            locationTypeId = schemas.Int64Schema
            state = schemas.StrSchema
            stateTerritoryName = schemas.StrSchema
            zip = schemas.StrSchema
            zip2 = schemas.StrSchema
            NALocation = schemas.StrSchema
        
            @staticmethod
            def country() -> typing.Type['LkuCode']:
                return LkuCode
            countryId = schemas.Int64Schema
            shortLocationString = schemas.StrSchema
            __annotations__ = {
                "locationId": locationId,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "city": city,
                "locationType": locationType,
                "locationTypeId": locationTypeId,
                "state": state,
                "stateTerritoryName": stateTerritoryName,
                "zip": zip,
                "zip2": zip2,
                "NALocation": NALocation,
                "country": country,
                "countryId": countryId,
                "shortLocationString": shortLocationString,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationType"]) -> 'LkuCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationTypeId"]) -> MetaOapg.properties.locationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateTerritoryName"]) -> MetaOapg.properties.stateTerritoryName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip2"]) -> MetaOapg.properties.zip2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NALocation"]) -> MetaOapg.properties.NALocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'LkuCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryId"]) -> MetaOapg.properties.countryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortLocationString"]) -> MetaOapg.properties.shortLocationString: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["locationId", "addressLine1", "addressLine2", "city", "locationType", "locationTypeId", "state", "stateTerritoryName", "zip", "zip2", "NALocation", "country", "countryId", "shortLocationString", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationType"]) -> typing.Union['LkuCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationTypeId"]) -> typing.Union[MetaOapg.properties.locationTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateTerritoryName"]) -> typing.Union[MetaOapg.properties.stateTerritoryName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip2"]) -> typing.Union[MetaOapg.properties.zip2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NALocation"]) -> typing.Union[MetaOapg.properties.NALocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['LkuCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryId"]) -> typing.Union[MetaOapg.properties.countryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortLocationString"]) -> typing.Union[MetaOapg.properties.shortLocationString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["locationId", "addressLine1", "addressLine2", "city", "locationType", "locationTypeId", "state", "stateTerritoryName", "zip", "zip2", "NALocation", "country", "countryId", "shortLocationString", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        locationId: typing.Union[MetaOapg.properties.locationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        locationType: typing.Union['LkuCode', schemas.Unset] = schemas.unset,
        locationTypeId: typing.Union[MetaOapg.properties.locationTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        stateTerritoryName: typing.Union[MetaOapg.properties.stateTerritoryName, str, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, str, schemas.Unset] = schemas.unset,
        zip2: typing.Union[MetaOapg.properties.zip2, str, schemas.Unset] = schemas.unset,
        NALocation: typing.Union[MetaOapg.properties.NALocation, str, schemas.Unset] = schemas.unset,
        country: typing.Union['LkuCode', schemas.Unset] = schemas.unset,
        countryId: typing.Union[MetaOapg.properties.countryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shortLocationString: typing.Union[MetaOapg.properties.shortLocationString, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Location':
        return super().__new__(
            cls,
            *args,
            locationId=locationId,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            city=city,
            locationType=locationType,
            locationTypeId=locationTypeId,
            state=state,
            stateTerritoryName=stateTerritoryName,
            zip=zip,
            zip2=zip2,
            NALocation=NALocation,
            country=country,
            countryId=countryId,
            shortLocationString=shortLocationString,
            _configuration=_configuration,
            **kwargs,
        )

from nasa_tech_port_python_sdk.model.lku_code import LkuCode
